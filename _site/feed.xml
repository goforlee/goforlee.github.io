<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2020-09-01T22:00:17+09:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Lee + Developer</title><subtitle>blog by WoongHee Lee</subtitle><entry><title type="html">[Clean Code] Chapter 2 - Meaningful Names</title><link href="http://0.0.0.0:4000/%EC%B1%85-CleanCode_Chap2/" rel="alternate" type="text/html" title="[Clean Code] Chapter 2 - Meaningful Names" /><published>2020-09-01T00:00:00+09:00</published><updated>2020-09-01T00:00:00+09:00</updated><id>http://0.0.0.0:4000/%5B%EC%B1%85%5DCleanCode_Chap2</id><content type="html" xml:base="http://0.0.0.0:4000/%EC%B1%85-CleanCode_Chap2/">&lt;hr /&gt;
&lt;p&gt;아직 챕터 2까지 밖에 안읽었지만 벌써 눈이 번쩍 뜨인다. 그동안 별로 중요하다고 생각하지 않았던 것들이 갑자기 엄청나게 중요해보이고 코딩을 읽고 쓸 때 좀 더 깊이 고민하게 된다. 챕터 2까지 읽은 소감은 진작 읽을걸…&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;이름-짓기에-온-힘을-다해라&quot;&gt;이름 짓기에 온 힘을 다해라&lt;/h2&gt;

&lt;p&gt;이름을 지을 때 그것이 변수든 함수든 그것의 목적이 나타나게 지으라는 말을 자주 듣는다. 이 책은 이에 대해 아주 심각하게 받아들이고 이름을 신중히 정하라고 말한다.&lt;/p&gt;

&lt;p&gt;첫 페이지에서부터 좋은 이름을 지었을 때의 예시를 보여주는데 신선하게 충격을 받았다. 이 챕터는 계속해서 어떻게 하면 이름을 잘 지을 수 있는 지를 알려준다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;뜻이 안보이는 이름은 피해라  ex) hp, aix, sco …&lt;/li&gt;
  &lt;li&gt;컴파일러가 만족하는 코딩을 하지 말고 자신을 위한 코딩을 써라 ex) 변수 뒤에 1,2 붙이는 나쁜 행동&lt;/li&gt;
  &lt;li&gt;noise word를 피해라 ex)Productinfo - ProductData 차이가 뭐야?&lt;/li&gt;
  &lt;li&gt;자신이 발음을 할 수 있는 이름을 지어줘라&lt;/li&gt;
  &lt;li&gt;찾기 쉬운 이름을 지어줘라&lt;/li&gt;
  &lt;li&gt;prefix는 정말 필요할 때만 특히 그룹 변수나 메소드를 표현할 때 좋다.&lt;/li&gt;
  &lt;li&gt;통일성을 찾아라&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;마지막으로 좋은 quote&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Clariry is king&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;막상 적고 보니 별거 없지만 챕터 3을 읽으면서도 느끼는 건 이름 짓기는 정말 중요하다. 대충 넘어갈 수 있는 부분을 처음부터 짚어줘서 정말 좋았다. 특히 나처럼 유지 보수를 하는 일에는 이름만큼 중요한게 없다. 왜냐면 사용자는 계속해서 무언가를 요구하고 나는 계속해서 사용자의 편의를 위해 남이 짠 코드를 읽고 수정하고 때로는 다른 개발자도 보기 쉽게 코드를 새로 짜야 하기 때문이다.&lt;/p&gt;

&lt;p&gt;개발자+작명가가 되어야 한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;개발명가&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><category term="책 [Book]" /><category term="클린코드 [CleanCode]" /><summary type="html">아직 챕터 2까지 밖에 안읽었지만 벌써 눈이 번쩍 뜨인다. 그동안 별로 중요하다고 생각하지 않았던 것들이 갑자기 엄청나게 중요해보이고 코딩을 읽고 쓸 때 좀 더 깊이 고민하게 된다. 챕터 2까지 읽은 소감은 진작 읽을걸…</summary></entry><entry><title type="html">[Clean Code] Chapter 1 - Clean Code</title><link href="http://0.0.0.0:4000/%EC%B1%85-CleanCode_Chap1/" rel="alternate" type="text/html" title="[Clean Code] Chapter 1 - Clean Code" /><published>2020-08-30T00:00:00+09:00</published><updated>2020-08-30T00:00:00+09:00</updated><id>http://0.0.0.0:4000/%5B%EC%B1%85%5DCleanCode_Chap1</id><content type="html" xml:base="http://0.0.0.0:4000/%EC%B1%85-CleanCode_Chap1/">&lt;hr /&gt;
&lt;p&gt;자 쭉쭉 읽어보자 화이팅&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-total-cost-of-owning-a-mess&quot;&gt;The Total Cost of Owning a Mess&lt;/h2&gt;

&lt;p&gt;처음에는 개발을 급하게 하면 처음에는 productivity가 높지만 깊이 고려가 되지 않은 코드 작성으로 인해 시간이 지날수록 productivity가 낮아지게 된다. bad code를 읽으면서 시간이 지체되는 현상에 로버트는 wading이라는 이름까지 붙여줬다. 즉 이런 일이 비일비재하다는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;okay-then-what-is--clean-code&quot;&gt;Okay then… What is  Clean Code?&lt;/h2&gt;

&lt;p&gt;로버트는 clean code를 정의하기 위해 다른 훌륭한 개발자들의 말을 빌린다. Bjarne stroustrup(C++의 창시자)는 clean code란 Elegant하고 Efficient 하다고 말한다. 마지막으로 그는 클린코드는 하나를 잘한다고 말한다. 다시 말하면 Clean Code is focused라는 뜻이다.&lt;/p&gt;

&lt;p&gt;개인적으로는 Dave Thomas의 정의가 맘에 든다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Clean Code can be read, and enhanced by a developer other than its original author.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이것은 일하면서 느낀 건데 가끔 다른 사람들이 쓴 코드를 읽고 수정하는데 너무 많은 시간을 보낼 때가 있다. 물론 내 실력이 부족함도 있지만 가끔보면 정말 잘 못쓴 코드들이 초보자인 내 눈에도 보일때가 많이 있다. 아마 내 코드도 다른 사람들에게 그렇게 보이지 않을까? 생각해볼만한 quote다.&lt;/p&gt;

&lt;p&gt;그 밖에도 여러 개발자들을 예로 들면서 설명해주는데 자세한건 다시 읽어봐라 ㅋ&lt;/p&gt;

&lt;h2 id=&quot;the-boy-scout-rule&quot;&gt;The Boy Scout Rule&lt;/h2&gt;

&lt;p&gt;한번 잘 쓰는 것은 충분치 않다. 계속해서 Clean Code를 유지해야한다. 여기에는 보이스카웃 룰이 잘 적용이 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Leave the campground cleaner than you found it”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;한번 체크인 할 때 마다 조금씩 조금씩 해당 소스를 더 좋게 만들어주는 것이다. 간단히 변수명을 바꾸는 것부터 시작해도 충분하다. 이렇게 조금씩 조금씩 만지는 소스마다 더 읽기 좋고 효율적으로 바꾼다면 점차적으로 내가 가지고 있는 모든 소스들의 코드가 한단계 더 나아질 것이다.&lt;/p&gt;</content><author><name></name></author><category term="책 [Book]" /><category term="클린코드 [CleanCode]" /><summary type="html">자 쭉쭉 읽어보자 화이팅</summary></entry><entry><title type="html">[책] 나도 이제 책을 좀 읽어야지</title><link href="http://0.0.0.0:4000/%EC%B1%85-%EC%B2%AB%EB%B2%88%EC%A7%B8/" rel="alternate" type="text/html" title="[책] 나도 이제 책을 좀 읽어야지" /><published>2020-08-27T00:00:00+09:00</published><updated>2020-08-27T00:00:00+09:00</updated><id>http://0.0.0.0:4000/%5B%EC%B1%85%5D%EC%B2%AB%EB%B2%88%EC%A7%B8</id><content type="html" xml:base="http://0.0.0.0:4000/%EC%B1%85-%EC%B2%AB%EB%B2%88%EC%A7%B8/">&lt;hr /&gt;
&lt;p&gt;국비지원을 통해서 개발자로서 입문하고 SM 회사(병원 전산)에서 근 9개월 간 일을 하면서 느낀 점은 나는 정말 근본없는 개발자라는 것이다. 학부 교육을 받지 못해 기초가 부족하고 다른 직종에 비해 다소 반복적인 업무를 맡다보니 실력이 빨리 는다는 느낌도 받지 못하고 있다.&lt;/p&gt;

&lt;p&gt;그래서 내린 결론은 ‘천천히 기초부터 다지자’, ‘좋은 책을 읽고 깊게 이해하자’ 이다. 사실 이게 맞는 방법인지도 잘 모르겠는데 아무것도 안하는거보다는 나으니까 그냥 해본다.&lt;/p&gt;

&lt;p&gt;목표는 책 끝까지 읽기, 읽은 부분에 대한 독후감 쓰기. 초등학교 다닐 때 억지로라도 쓰지도 않던 걸 나이 30이 되서 자발적으로 쓰다니… 나도 이제 어른인가 ? 훗&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;자 그럼 독후감 포스트인 만큼 책을 먼저 선정해야한다. 그동안 고랭이니, 자바니, 리액트니 하는 기본서들만 읽었지 개발자 교양 책은 읽어보질 못했다.&lt;/p&gt;

&lt;h3 id=&quot;구글아-도와줘&quot;&gt;구글아 도와줘&lt;/h3&gt;

&lt;p&gt;그래서 구글에 ‘개발자 추천책’을 검색했고 그 중 거의 모든 페이지에 언급된 책을 골랐다. 바로바로바로바바롸볼바ㅗㄹ바로바로바롭라ㅗㅂ라ㅗㅂ라ㅗ바롤&lt;/p&gt;

&lt;h1 id=&quot;클린-코드-by-로버트-c-마틴&quot;&gt;클린 코드 by 로버트 C. 마틴&lt;/h1&gt;

&lt;p&gt;거짓말 안치고 거의 모든 블로그 개발자 책 추천 포스팅에는 요 책이 있다. 그래서 나도 읽을라고 한다. 남들이 좋다는 데에는 다 이유가 있을 것이니&lt;/p&gt;

&lt;h2 id=&quot;uncle-bob&quot;&gt;Uncle Bob&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/Uncle_Bob_Pic.png&quot; alt=&quot;bob's_FACE&quot; /&gt;
(Uncle Bob의 삿대질)&lt;/p&gt;

&lt;p&gt;로버트는 엉클밥이라는 친숙한 별명으로 불리는 듯 하다. 그는 1970년 부터 프로그래머로서 종사해왔고 개발자로서도 물론 성공한 사람이지만 그가 쓴 책과 세계 곳곳에서 열리는 세미나로 더 유명한 아저씬거 같다.&lt;/p&gt;

&lt;p&gt;원래는 좀 깊이 있게 조사하고 싶었는데 나오는 자료가 별로 없다ㅋㅋ 그러므로 여기까지만 쓰겠다. (귀찮아진거 아님)&lt;/p&gt;

&lt;p&gt;다음 포스팅에서부터는 본격적으로 책을 읽고 독후감을 쓰겠다. 시작이 반이다. 화이팅.&lt;/p&gt;</content><author><name></name></author><category term="책 [Book]" /><summary type="html">국비지원을 통해서 개발자로서 입문하고 SM 회사(병원 전산)에서 근 9개월 간 일을 하면서 느낀 점은 나는 정말 근본없는 개발자라는 것이다. 학부 교육을 받지 못해 기초가 부족하고 다른 직종에 비해 다소 반복적인 업무를 맡다보니 실력이 빨리 는다는 느낌도 받지 못하고 있다.</summary></entry><entry><title type="html">[GO] Go Lang?</title><link href="http://0.0.0.0:4000/Go-Lang/" rel="alternate" type="text/html" title="[GO] Go Lang?" /><published>2020-07-24T00:00:00+09:00</published><updated>2020-07-24T00:00:00+09:00</updated><id>http://0.0.0.0:4000/Go%20%20Lang</id><content type="html" xml:base="http://0.0.0.0:4000/Go-Lang/">&lt;hr /&gt;
&lt;p&gt;다음에 또 처음부터 세팅해야 될지도 모르니까 미래를 위해 써놓자&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;먼저-맥-기본-세팅부터&quot;&gt;먼저 맥 기본 세팅부터&lt;/h2&gt;
&lt;p&gt;다른거 없다 이 &lt;a href=&quot;https://subicura.com/2017/11/22/mac-os-development-environment-setup.html&quot;&gt;링크&lt;/a&gt;가서 첨부터 하나씩 다 따라하면 된다. 깔끔하게 필요한 정보를 정리해주신 너무나 감사한 분임에 틀림없다.&lt;/p&gt;

&lt;h2 id=&quot;이제-고랭을-위한-세팅을-해보자&quot;&gt;이제 고랭을 위한 세팅을 해보자&lt;/h2&gt;
&lt;p&gt;인터넷에서 &lt;a href=&quot;https://golang.org/dl/&quot;&gt;고랭 공식 웹사이트&lt;/a&gt;을 다운받아도 되고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;homebrew&lt;/code&gt;를 이용해서 다운받아도 된다. homebrew로 다운받는게 개발자로서 더 멋있음으로 터미널을 열어서 다운받자. (homebrew로 하는게 관리하기도 쉽다.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;터미널을 열고 그대로 복붙해라!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;step 1. homebrew가 없을 때 homebrew부터 다운 받자&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;step 2. 고랭 다운받기&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew update&amp;amp;&amp;amp; brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;golang
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;step 3. 고랭 사용 준비하기&lt;/p&gt;

&lt;p&gt;고랭을 사용하기 위해서는 기본적인 폴더들(go,bin, src)을 만들어줘야한다. 폴더들을 어디에다가 만들지는 사용자에 따라 취향을 타는 것 같다. 아래의 내용을 터미널에 입력하면 /users/mycomputer에 생성이 된다. 
가장 기본적인 디렉토리니까 이런거 세팅 처음하고 잘못하면 아래대로 하고 ‘난 고수다 세팅 정도는 내 맘대로 할 수 있다’ 하면 자기가 원하는 디렉토리를 만들어줘라.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/go/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;bin,src&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;step 4. 고랭 환경설정하기&lt;/p&gt;

&lt;p&gt;위의 맥 기본 세팅을 따라왔다면 현재 zsh를 쓰고 있는 상태일 것이다. 그렇다면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; 파일을 수정해줘야 한다. 이 파일은 /users/mycomputer 이 경로에 숨어있는 파일로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shift&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; 키를 입력하면 볼 수 있다. 또는, vim을 이용해서 수정할 수 있는데 이는 어려우니까 알면하고 모르면 가장 원초적인 방법으로 해자. 위의 단축키를 누르면 폴더들이 옅은 회색으로 보이는데 그 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; 파일이 있다. 
파일 맨 마지막 줄에 다음을 삽입해준다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export GOPATH=$HOME/go
export PATH=&quot;$PATH:${GOPATH}/bin:${GOROOT}/bin&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그럼 끝! 고 사용 준비 완료!&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="고랭 [Go]" /><summary type="html">다음에 또 처음부터 세팅해야 될지도 모르니까 미래를 위해 써놓자</summary></entry></feed>