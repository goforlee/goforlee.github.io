<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2020-09-19T20:31:05+09:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Lee + Developer</title><subtitle>blog by WoongHee Lee</subtitle><entry><title type="html">[Clean Code] Chapter 4&amp;amp;5 - Comments &amp;amp; Formatting</title><link href="http://0.0.0.0:4000/%EC%B1%85-CleanCode_Chap4,5/" rel="alternate" type="text/html" title="[Clean Code] Chapter 4&amp;5 - Comments &amp; Formatting" /><published>2020-09-17T00:00:00+09:00</published><updated>2020-09-17T00:00:00+09:00</updated><id>http://0.0.0.0:4000/%5B%EC%B1%85%5DCleanCode_Chap4,5</id><content type="html" xml:base="http://0.0.0.0:4000/%EC%B1%85-CleanCode_Chap4,5/">&lt;hr /&gt;
&lt;p&gt;나의 전형적인 문제가 나온다. 처음에는 아주 엄청난 의욕으로 시작하다가 슬슬 귀찮아지고 점점 안하는 나의 모습. 어느정도 예상은 했지만 이렇게 빨리?? ㅋㅋ 그렇다고 그동안 책을 안읽은 것은 아니다. 읽긴 했는데 포스팅이 급 귀찮… 진지하게 블로그 글을 100개 이상 꾸준히 쓰시는 분들은 대단한 사람들이시다. 리스펙.&lt;/p&gt;

&lt;p&gt;아무튼 오늘은 챕터4,5를 한꺼번에 포스팅 하겠다.(절대 귀찮은거아님) 내용도 별로 없고 이를 포스팅 두개로 나누기에는 조금 애매해서 이렇게 정했다.
***&lt;/p&gt;

&lt;h2 id=&quot;chatper-4-comments&quot;&gt;Chatper 4 Comments&lt;/h2&gt;
&lt;p&gt;챕터4장에서는 하나만 기억하면 된다. 코멘트 쓰지마! 개발자는 코드로 대화를 나누는 사람이지 주석으로 대화를 나누는 사람이 아니다. 끝. 하고 끝내면 좋겠지만 좀 더 알아야할 내용이 있다. 지금 아니면 주석에 대해서 언제 배우겠나? 지금 잘 배워놓고 두번 다시 주석에 대해 배우지말자 ㅋ&lt;/p&gt;

&lt;p&gt;굳이 코멘트를 써야한다면 몇가지 상황들을 고려해볼 수 있다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;코드에 대해 왜 그렇게 코드를 짜야만 했는지 또는 무엇을 의도했는지를 적을 때&lt;/li&gt;
  &lt;li&gt;가끔은 의미가 애매한 매개변수 또는 리턴값에 대해서 적을 때&lt;/li&gt;
  &lt;li&gt;특정 부분의 코드를 강조하고 싶을 때&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;코멘트를 쓸 때 주의할 점&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;뜻이 명확히 전달되도록 해라. 귀찮다고 대충 적지말고 의도하는 바를 짧고 명확하게 밝혀야 한다.&lt;/li&gt;
  &lt;li&gt;반복되는 내용을 쓰지마라. 코드에 이미 정확히 명시가 되어있는임에도 불구하고 주석을 또 다는 것은 바보다&lt;/li&gt;
  &lt;li&gt;로그성 코멘트. 과거에는 필요했을지 모르나 오늘날에는 형상관리가 아주 잘 되어있기 때문에 굳이 수정할 때마다 로그를 달 필요는 없다.&lt;/li&gt;
  &lt;li&gt;당연한거지만 쓸데없는 주석은 다 지워라.&lt;/li&gt;
  &lt;li&gt;위치를 알려주는 주석 예를들면 /////////function////////////////// 이런 짓은 하지마라&lt;/li&gt;
  &lt;li&gt;너무 많은 정보를 담은 주석. 이럴거면 그냥 문서를 하나 만들어서 공용문서로 만들어라.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;chapter-5-formatting&quot;&gt;Chapter 5 Formatting&lt;/h2&gt;</content><author><name></name></author><category term="책 [Book]" /><category term="클린코드 [CleanCode]" /><summary type="html">나의 전형적인 문제가 나온다. 처음에는 아주 엄청난 의욕으로 시작하다가 슬슬 귀찮아지고 점점 안하는 나의 모습. 어느정도 예상은 했지만 이렇게 빨리?? ㅋㅋ 그렇다고 그동안 책을 안읽은 것은 아니다. 읽긴 했는데 포스팅이 급 귀찮… 진지하게 블로그 글을 100개 이상 꾸준히 쓰시는 분들은 대단한 사람들이시다. 리스펙.</summary></entry><entry><title type="html">[Clean Code] Chapter 3 - Functions</title><link href="http://0.0.0.0:4000/%EC%B1%85-CleanCode_Chap3/" rel="alternate" type="text/html" title="[Clean Code] Chapter 3 - Functions" /><published>2020-09-06T00:00:00+09:00</published><updated>2020-09-06T00:00:00+09:00</updated><id>http://0.0.0.0:4000/%5B%EC%B1%85%5D%20CleanCode_Chap3</id><content type="html" xml:base="http://0.0.0.0:4000/%EC%B1%85-CleanCode_Chap3/">&lt;hr /&gt;
&lt;p&gt;몇개 되지도 않는 포스팅 글들을 다시 읽어보니 글 솜씨가 영 아니다. 나는 실제로 만나면 참 재밌고 말도 잘하는 사람인데 왜 글만 쓰면 재미도 없고 말도 잘 못하지? 블로그 포스팅하면서 드립치는 사람들에게 존경의 표시를 보낸다. 글로 드립치는게 쉽지 않네. 그래도 계속 쓰다보면 글 쓰는 실력이 조금 나아지지 않을까?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;함수는-20줄을-넘기면-안돼&quot;&gt;함수는 20줄을 넘기면 안돼!&lt;/h3&gt;
&lt;p&gt;함수를 작성할 때 첫번째 rule은 함수들을 작게 만드는 것이다. 두번째는 그 함수들을 더 작게 만드는 것이다. Robert는 그의 프로그래머로서 40년 동안의 다양한 함수를 작성하면서 그가 배운점은 함수들은 굉장히 작아야 한다는 것이다. 이에 따라 그는 함수는 길어도 20줄을 넘기지 않아야 한다고 말한다. 더 나아가 함수의 길이는 4줄이 적당하다고 하고 Indentation은 하나에서 두개 정도가 적당하다고 한다.&lt;/p&gt;

&lt;p&gt;지금 회사에서 쓰고 있는 함수들을 살펴보면 그가 말하는 것과는 정반대인 경우가 99%이다. 몇십줄을 넘기는 함수는 기본이고 몇백줄되는 함수 또한 비일비재하다. 그런 코드들을 보면서 느낀점은 Robert의 말이 맞다는 것이다. 그런 함수들을 이해하고 수정하려면 하루종일 걸린다. 그리고 또 거기에 수정을 하려면 상당히 복잡한 함수들의 관계를 잘 이해해야 하기 때문에 시간은 더더욱 오래걸리게 된다.&lt;/p&gt;

&lt;h3 id=&quot;함수는-한가지-일만-수행해야-한다&quot;&gt;함수는 한가지 일만 수행해야 한다.&lt;/h3&gt;
&lt;p&gt;위의 규칙을 적용하면 어쩌면 자연스럽게 따라오는 규칙이 아닐까 싶다. 함수 하나가 최대 4줄이면 한가지 일만 넣기도 힘들 것 같다. 한가지 일만 수행하는 함수는 작성 후 다른 사람이 봤을 때에도 이해하기 쉽고 또 수정하기도 쉽게 해준다.&lt;/p&gt;

&lt;h3 id=&quot;함수안의-추상적-수준은-항상-같게-해줘라&quot;&gt;함수안의 추상적 수준은 항상 같게 해줘라&lt;/h3&gt;
&lt;p&gt;이건 처음 읽었을 때 조금 이해하기 어려웠다. 이 말은 즉 한 함수안에 코드를 작성할 때 만약 다른 함수를 불러와서 가져다가 쓴다면 그 함수의 추상적인 수준을 해당 brock에 있는 다른 코드들과 같이 하라는 것이다. 잘 이해가 안가면 36page를 돌아가서 다시 읽어라 ㅋ&lt;/p&gt;

&lt;h3 id=&quot;코드는-위에서-아래로-읽을-수-있도록-작섣되어야-한다-stepdown-rule&quot;&gt;코드는 위에서 아래로 읽을 수 있도록 작섣되어야 한다. Stepdown Rule&lt;/h3&gt;
&lt;p&gt;코드를 위에서 아래로 읽으며 이해할 수 있도록 작성하는 것은 프로그래머로서 꼭 배워야 할 스킬이다. 책에서는 TO paragraph를 말하는데 이게 뭔지 정확하게 모르겠다. ㅋ&lt;/p&gt;

&lt;h3 id=&quot;이름을-잘-지어라&quot;&gt;이름을 잘 지어라.&lt;/h3&gt;
&lt;p&gt;이름을 지을 때 함수가 어떤일을 수행하는 지를 보여줄 수 있도록 작성해야한다. Ward’s principle은 “You know you are working on clean code when each routine turns out to be pretty much what you expected.” 라고 말했다. 이를 성취하기 위해서는 코드에 좋은 이름을 지어주고 함수들을 아주 작게 쪼개서 만드는 것이 매우 중요하다. 함수의 의미를 잘 설명하기 위해 함수에 이름을 길게 짓는 것을 두려워하면 안된다. 따라서 이름을 고르는 일에 시간을 투자하는 것을 두려워하지 말아야 한다. 또 이름을 지을 때 일정 패턴을 만들어 이를 잘 따르면 나중에 이해하기 쉬운 함수 이름을 만들 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;일을 하다보면 이름 짓기에 시간을 보내는 것이 가끔 눈치가 보일 때가 있다. 내가 가끔 화면을 뚫어져라 보고 있으면 옆에서 할 거 없냐고 물어볼 때도 있고 내가 그냥 쉬는 줄 아는 사람도 있다.ㅋ 이는 어쩌면 회사 문화가 잘 자리 잡히지 않았을 수도 있고 아니면 순수한 호기심일 수도 있을 것이다. 앞으로는 누군가 나에게 이런 질문들을 한다면 작명 고민을 하고 있다고 말해주면서 이 책을 추천해줘야겠다.&lt;/p&gt;

&lt;h3 id=&quot;매개변수는-최대한으로-줄여라&quot;&gt;매개변수는 최대한으로 줄여라&lt;/h3&gt;
&lt;p&gt;가장 좋은 함수는 매개변수가 없는 함수! 두번째는 매개변수가 하나인 함수, 매개변수가 3개 이상으로 넘어가면 조금 다시 생각해볼 문제. 단 arguments list는 하나로 친다. 얘네는 하나로 치는 것이 맞다. 왜냐하면 다 리스트일 뿐 안의 내용은 같은 성질이기 때문이다.&lt;/p&gt;

&lt;h3 id=&quot;trycatch는-못생겼다&quot;&gt;try/catch는 못생겼다.&lt;/h3&gt;
&lt;p&gt;따라서 못생긴 애들은 무조건 함수로 뺴야한다. try로 시작해서 catch로 끝난 다음 그 뒤에는 그 어떤 소스도 있어서는 안된다. 읽기도 어렵고 못생겼다.&lt;/p&gt;

&lt;h3 id=&quot;국룰-반복하지마라&quot;&gt;국룰. 반복하지마라.&lt;/h3&gt;
&lt;p&gt;반복은 소스를 크게 만들고 수정시 시간이 몇배로 더 든다.&lt;/p&gt;

&lt;h3 id=&quot;return-break-continue-go-to&quot;&gt;return, break, continue, go to&lt;/h3&gt;
&lt;p&gt;리턴은 함수에 하나씩, break와 continue는 쓰지마라, go to 는 절대 절대 절대 쓰지마라. 이는 함수를 작게 짜면 짤수록 지키기가 쉬워진다. 따라서 함수를 작게 쓰면 이 룰은 알아서 따라올 것이다.&lt;/p&gt;

&lt;h3 id=&quot;어떻게하면-함수를-이-규칙을-잘-따르면서-작성할-수-있을까&quot;&gt;어떻게하면 함수를 이 규칙을 잘 따르면서 작성할 수 있을까?&lt;/h3&gt;
&lt;p&gt;Robert는 자신이 처음 코드를 작성할 때는 소스들이 길고 복잡하다고 한다. 그 다음 코드들을 천천히 정리하면서 자신이 만든 룰을 따른다고 한다.&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;
&lt;p&gt;아주 훌륭한 quote다&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“The art of programming is, and has always been, the art of language design.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;프로그래밍 마스터는 훌륭한 스토리텔러다. 프로그래머는 코드를 통해서 자신이 하고자 하는 일을 잘 표현할 수 있어야 한다. ㅜ&lt;/p&gt;</content><author><name></name></author><category term="책 [Book]" /><category term="클린코드 [CleanCode]" /><summary type="html">몇개 되지도 않는 포스팅 글들을 다시 읽어보니 글 솜씨가 영 아니다. 나는 실제로 만나면 참 재밌고 말도 잘하는 사람인데 왜 글만 쓰면 재미도 없고 말도 잘 못하지? 블로그 포스팅하면서 드립치는 사람들에게 존경의 표시를 보낸다. 글로 드립치는게 쉽지 않네. 그래도 계속 쓰다보면 글 쓰는 실력이 조금 나아지지 않을까?</summary></entry><entry><title type="html">[Clean Code] Chapter 2 - Meaningful Names</title><link href="http://0.0.0.0:4000/%EC%B1%85-CleanCode_Chap2/" rel="alternate" type="text/html" title="[Clean Code] Chapter 2 - Meaningful Names" /><published>2020-09-01T00:00:00+09:00</published><updated>2020-09-01T00:00:00+09:00</updated><id>http://0.0.0.0:4000/%5B%EC%B1%85%5DCleanCode_Chap2</id><content type="html" xml:base="http://0.0.0.0:4000/%EC%B1%85-CleanCode_Chap2/">&lt;hr /&gt;
&lt;p&gt;아직 챕터 2까지 밖에 안읽었지만 벌써 눈이 번쩍 뜨인다. 그동안 별로 중요하다고 생각하지 않았던 것들이 갑자기 엄청나게 중요해보이고 코딩을 읽고 쓸 때 좀 더 깊이 고민하게 된다. 챕터 2까지 읽은 소감은 진작 읽을걸…&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;이름-짓기에-온-힘을-다해라&quot;&gt;이름 짓기에 온 힘을 다해라&lt;/h2&gt;

&lt;p&gt;이름을 지을 때 그것이 변수든 함수든 그것의 목적이 나타나게 지으라는 말을 자주 듣는다. 이 책은 이에 대해 아주 심각하게 받아들이고 이름을 신중히 정하라고 말한다.&lt;/p&gt;

&lt;p&gt;첫 페이지에서부터 좋은 이름을 지었을 때의 예시를 보여주는데 신선하게 충격을 받았다. 이 챕터는 계속해서 어떻게 하면 이름을 잘 지을 수 있는 지를 알려준다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;뜻이 안보이는 이름은 피해라  ex) hp, aix, sco …&lt;/li&gt;
  &lt;li&gt;컴파일러가 만족하는 코딩을 하지 말고 자신을 위한 코딩을 써라 ex) 변수 뒤에 1,2 붙이는 나쁜 행동&lt;/li&gt;
  &lt;li&gt;noise word를 피해라 ex)Productinfo - ProductData 차이가 뭐야?&lt;/li&gt;
  &lt;li&gt;자신이 발음을 할 수 있는 이름을 지어줘라&lt;/li&gt;
  &lt;li&gt;찾기 쉬운 이름을 지어줘라&lt;/li&gt;
  &lt;li&gt;prefix는 정말 필요할 때만 특히 그룹 변수나 메소드를 표현할 때 좋다.&lt;/li&gt;
  &lt;li&gt;통일성을 찾아라&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;마지막으로 좋은 quote&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Clariry is king&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;막상 적고 보니 별거 없지만 챕터 2를 읽으면서도 느끼는 건 이름 짓기는 정말 중요하다. 대충 넘어갈 수 있는 부분을 처음부터 짚어줘서 정말 좋았다. 특히 나처럼 유지 보수를 하는 일에는 이름만큼 중요한게 없다. 왜냐면 사용자는 계속해서 무언가를 요구하고 나는 계속해서 사용자의 편의를 위해 남이 짠 코드를 읽고 수정하고 때로는 다른 개발자도 보기 쉽게 코드를 새로 짜야 하기 때문이다.&lt;/p&gt;

&lt;p&gt;개발자+작명가가 되어야 한다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;개발명가&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><category term="책 [Book]" /><category term="클린코드 [CleanCode]" /><summary type="html">아직 챕터 2까지 밖에 안읽었지만 벌써 눈이 번쩍 뜨인다. 그동안 별로 중요하다고 생각하지 않았던 것들이 갑자기 엄청나게 중요해보이고 코딩을 읽고 쓸 때 좀 더 깊이 고민하게 된다. 챕터 2까지 읽은 소감은 진작 읽을걸…</summary></entry><entry><title type="html">[Clean Code] Chapter 1 - Clean Code</title><link href="http://0.0.0.0:4000/%EC%B1%85-CleanCode_Chap1/" rel="alternate" type="text/html" title="[Clean Code] Chapter 1 - Clean Code" /><published>2020-08-30T00:00:00+09:00</published><updated>2020-08-30T00:00:00+09:00</updated><id>http://0.0.0.0:4000/%5B%EC%B1%85%5DCleanCode_Chap1</id><content type="html" xml:base="http://0.0.0.0:4000/%EC%B1%85-CleanCode_Chap1/">&lt;hr /&gt;
&lt;p&gt;자 쭉쭉 읽어보자 화이팅&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-total-cost-of-owning-a-mess&quot;&gt;The Total Cost of Owning a Mess&lt;/h2&gt;

&lt;p&gt;처음에는 개발을 급하게 하면 처음에는 productivity가 높지만 깊이 고려가 되지 않은 코드 작성으로 인해 시간이 지날수록 productivity가 낮아지게 된다. bad code를 읽으면서 시간이 지체되는 현상에 로버트는 wading이라는 이름까지 붙여줬다. 즉 이런 일이 비일비재하다는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;okay-then-what-is--clean-code&quot;&gt;Okay then… What is  Clean Code?&lt;/h2&gt;

&lt;p&gt;로버트는 clean code를 정의하기 위해 다른 훌륭한 개발자들의 말을 빌린다. Bjarne stroustrup(C++의 창시자)는 clean code란 Elegant하고 Efficient 하다고 말한다. 마지막으로 그는 클린코드는 하나를 잘한다고 말한다. 다시 말하면 Clean Code is focused라는 뜻이다.&lt;/p&gt;

&lt;p&gt;개인적으로는 Dave Thomas의 정의가 맘에 든다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Clean Code can be read, and enhanced by a developer other than its original author.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이것은 일하면서 느낀 건데 가끔 다른 사람들이 쓴 코드를 읽고 수정하는데 너무 많은 시간을 보낼 때가 있다. 물론 내 실력이 부족함도 있지만 가끔보면 정말 잘 못쓴 코드들이 초보자인 내 눈에도 보일때가 많이 있다. 아마 내 코드도 다른 사람들에게 그렇게 보이지 않을까? 생각해볼만한 quote다.&lt;/p&gt;

&lt;p&gt;그 밖에도 여러 개발자들을 예로 들면서 설명해주는데 자세한건 다시 읽어봐라 ㅋ&lt;/p&gt;

&lt;h2 id=&quot;the-boy-scout-rule&quot;&gt;The Boy Scout Rule&lt;/h2&gt;

&lt;p&gt;한번 잘 쓰는 것은 충분치 않다. 계속해서 Clean Code를 유지해야한다. 여기에는 보이스카웃 룰이 잘 적용이 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Leave the campground cleaner than you found it”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;한번 체크인 할 때 마다 조금씩 조금씩 해당 소스를 더 좋게 만들어주는 것이다. 간단히 변수명을 바꾸는 것부터 시작해도 충분하다. 이렇게 조금씩 조금씩 만지는 소스마다 더 읽기 좋고 효율적으로 바꾼다면 점차적으로 내가 가지고 있는 모든 소스들의 코드가 한단계 더 나아질 것이다.&lt;/p&gt;</content><author><name></name></author><category term="책 [Book]" /><category term="클린코드 [CleanCode]" /><summary type="html">자 쭉쭉 읽어보자 화이팅</summary></entry><entry><title type="html">[책] 나도 이제 책을 좀 읽어야지</title><link href="http://0.0.0.0:4000/%EC%B1%85-%EC%B2%AB%EB%B2%88%EC%A7%B8/" rel="alternate" type="text/html" title="[책] 나도 이제 책을 좀 읽어야지" /><published>2020-08-27T00:00:00+09:00</published><updated>2020-08-27T00:00:00+09:00</updated><id>http://0.0.0.0:4000/%5B%EC%B1%85%5D%EC%B2%AB%EB%B2%88%EC%A7%B8</id><content type="html" xml:base="http://0.0.0.0:4000/%EC%B1%85-%EC%B2%AB%EB%B2%88%EC%A7%B8/">&lt;hr /&gt;
&lt;p&gt;국비지원을 통해서 개발자로서 입문하고 SM 회사(병원 전산)에서 근 9개월 간 일을 하면서 느낀 점은 나는 정말 근본없는 개발자라는 것이다. 학부 교육을 받지 못해 기초가 부족하고 다른 직종에 비해 다소 반복적인 업무를 맡다보니 실력이 빨리 는다는 느낌도 받지 못하고 있다.&lt;/p&gt;

&lt;p&gt;그래서 내린 결론은 ‘천천히 기초부터 다지자’, ‘좋은 책을 읽고 깊게 이해하자’ 이다. 사실 이게 맞는 방법인지도 잘 모르겠는데 아무것도 안하는거보다는 나으니까 그냥 해본다.&lt;/p&gt;

&lt;p&gt;목표는 책 끝까지 읽기, 읽은 부분에 대한 독후감 쓰기. 초등학교 다닐 때 억지로라도 쓰지도 않던 걸 나이 30이 되서 자발적으로 쓰다니… 나도 이제 어른인가 ? 훗&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;자 그럼 독후감 포스트인 만큼 책을 먼저 선정해야한다. 그동안 고랭이니, 자바니, 리액트니 하는 기본서들만 읽었지 개발자 교양 책은 읽어보질 못했다.&lt;/p&gt;

&lt;h3 id=&quot;구글아-도와줘&quot;&gt;구글아 도와줘&lt;/h3&gt;

&lt;p&gt;그래서 구글에 ‘개발자 추천책’을 검색했고 그 중 거의 모든 페이지에 언급된 책을 골랐다. 바로바로바로바바롸볼바ㅗㄹ바로바로바롭라ㅗㅂ라ㅗㅂ라ㅗ바롤&lt;/p&gt;

&lt;h1 id=&quot;클린-코드-by-로버트-c-마틴&quot;&gt;클린 코드 by 로버트 C. 마틴&lt;/h1&gt;

&lt;p&gt;거짓말 안치고 거의 모든 블로그 개발자 책 추천 포스팅에는 요 책이 있다. 그래서 나도 읽을라고 한다. 남들이 좋다는 데에는 다 이유가 있을 것이니&lt;/p&gt;

&lt;h2 id=&quot;uncle-bob&quot;&gt;Uncle Bob&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/Uncle_Bob_Pic.png&quot; alt=&quot;bob's_FACE&quot; /&gt;
(Uncle Bob의 삿대질)&lt;/p&gt;

&lt;p&gt;로버트는 엉클밥이라는 친숙한 별명으로 불리는 듯 하다. 그는 1970년 부터 프로그래머로서 종사해왔고 개발자로서도 물론 성공한 사람이지만 그가 쓴 책과 세계 곳곳에서 열리는 세미나로 더 유명한 아저씬거 같다.&lt;/p&gt;

&lt;p&gt;원래는 좀 깊이 있게 조사하고 싶었는데 나오는 자료가 별로 없다ㅋㅋ 그러므로 여기까지만 쓰겠다. (귀찮아진거 아님)&lt;/p&gt;

&lt;p&gt;다음 포스팅에서부터는 본격적으로 책을 읽고 독후감을 쓰겠다. 시작이 반이다. 화이팅.&lt;/p&gt;</content><author><name></name></author><category term="책 [Book]" /><summary type="html">국비지원을 통해서 개발자로서 입문하고 SM 회사(병원 전산)에서 근 9개월 간 일을 하면서 느낀 점은 나는 정말 근본없는 개발자라는 것이다. 학부 교육을 받지 못해 기초가 부족하고 다른 직종에 비해 다소 반복적인 업무를 맡다보니 실력이 빨리 는다는 느낌도 받지 못하고 있다.</summary></entry><entry><title type="html">[GO] Go Lang?</title><link href="http://0.0.0.0:4000/Go-Lang/" rel="alternate" type="text/html" title="[GO] Go Lang?" /><published>2020-07-24T00:00:00+09:00</published><updated>2020-07-24T00:00:00+09:00</updated><id>http://0.0.0.0:4000/Go%20%20Lang</id><content type="html" xml:base="http://0.0.0.0:4000/Go-Lang/">&lt;hr /&gt;
&lt;p&gt;다음에 또 처음부터 세팅해야 될지도 모르니까 미래를 위해 써놓자&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;먼저-맥-기본-세팅부터&quot;&gt;먼저 맥 기본 세팅부터&lt;/h2&gt;
&lt;p&gt;다른거 없다 이 &lt;a href=&quot;https://subicura.com/2017/11/22/mac-os-development-environment-setup.html&quot;&gt;링크&lt;/a&gt;가서 첨부터 하나씩 다 따라하면 된다. 깔끔하게 필요한 정보를 정리해주신 너무나 감사한 분임에 틀림없다.&lt;/p&gt;

&lt;h2 id=&quot;이제-고랭을-위한-세팅을-해보자&quot;&gt;이제 고랭을 위한 세팅을 해보자&lt;/h2&gt;
&lt;p&gt;인터넷에서 &lt;a href=&quot;https://golang.org/dl/&quot;&gt;고랭 공식 웹사이트&lt;/a&gt;을 다운받아도 되고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;homebrew&lt;/code&gt;를 이용해서 다운받아도 된다. homebrew로 다운받는게 개발자로서 더 멋있음으로 터미널을 열어서 다운받자. (homebrew로 하는게 관리하기도 쉽다.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;터미널을 열고 그대로 복붙해라!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;step 1. homebrew가 없을 때 homebrew부터 다운 받자&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;step 2. 고랭 다운받기&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew update&amp;amp;&amp;amp; brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;golang
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;step 3. 고랭 사용 준비하기&lt;/p&gt;

&lt;p&gt;고랭을 사용하기 위해서는 기본적인 폴더들(go,bin, src)을 만들어줘야한다. 폴더들을 어디에다가 만들지는 사용자에 따라 취향을 타는 것 같다. 아래의 내용을 터미널에 입력하면 /users/mycomputer에 생성이 된다. 
가장 기본적인 디렉토리니까 이런거 세팅 처음하고 잘못하면 아래대로 하고 ‘난 고수다 세팅 정도는 내 맘대로 할 수 있다’ 하면 자기가 원하는 디렉토리를 만들어줘라.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/go/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;bin,src&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;step 4. 고랭 환경설정하기&lt;/p&gt;

&lt;p&gt;위의 맥 기본 세팅을 따라왔다면 현재 zsh를 쓰고 있는 상태일 것이다. 그렇다면, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; 파일을 수정해줘야 한다. 이 파일은 /users/mycomputer 이 경로에 숨어있는 파일로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shift&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; 키를 입력하면 볼 수 있다. 또는, vim을 이용해서 수정할 수 있는데 이는 어려우니까 알면하고 모르면 가장 원초적인 방법으로 해자. 위의 단축키를 누르면 폴더들이 옅은 회색으로 보이는데 그 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; 파일이 있다. 
파일 맨 마지막 줄에 다음을 삽입해준다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export GOPATH=$HOME/go
export PATH=&quot;$PATH:${GOPATH}/bin:${GOROOT}/bin&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그럼 끝! 고 사용 준비 완료!&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="고랭 [Go]" /><summary type="html">다음에 또 처음부터 세팅해야 될지도 모르니까 미래를 위해 써놓자</summary></entry></feed>