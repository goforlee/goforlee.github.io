I"	<hr />
<p>자 쭉쭉 읽어보자 화이팅</p>

<hr />

<h2 id="the-total-cost-of-owning-a-mess">The Total Cost of Owning a Mess</h2>

<p>처음에는 개발을 급하게 하면 처음에는 productivity가 높지만 깊이 고려가 되지 않은 코드 작성으로 인해 시간이 지날수록 productivity가 낮아지게 된다. bad code를 읽으면서 시간이 지체되는 현상에 로버트는 wading이라는 이름까지 붙여줬다. 즉 이런 일이 비일비재하다는 것이다.</p>

<h2 id="okay-then-what-is--clean-code">Okay then… What is  Clean Code?</h2>

<p>로버트는 clean code를 정의하기 위해 다른 훌륭한 개발자들의 말을 빌린다. Bjarne stroustrup(C++의 창시자)는 clean code란 Elegant하고 Efficient 하다고 말한다. 마지막으로 그는 클린코드는 하나를 잘한다고 말한다. 다시 말하면 Clean Code is focused라는 뜻이다.</p>

<p>개인적으로는 Dave Thomas의 정의가 맘에 든다.</p>

<blockquote>
  <p>“Clean Code can be read, and enhanced by a developer other than its original author.”</p>
</blockquote>

<p>이것은 일하면서 느낀 건데 가끔 다른 사람들이 쓴 코드를 읽고 수정하는데 너무 많은 시간을 보낼 때가 있다. 물론 내 실력이 부족함도 있지만 가끔보면 정말 잘 못쓴 코드들이 초보자인 내 눈에도 보일때가 많이 있다. 아마 내 코드도 다른 사람들에게 그렇게 보이지 않을까? 생각해볼만한 quote다.</p>

<p>그 밖에도 여러 개발자들을 예로 들면서 설명해주는데 자세한건 다시 읽어봐라 ㅋ</p>

<h2 id="the-boy-scout-rule">The Boy Scout Rule</h2>

<p>한번 잘 쓰는 것은 충분치 않다. 계속해서 Clean Code를 유지해야한다. 여기에는 보이스카웃 룰이 잘 적용이 된다.</p>

<blockquote>
  <p>“Leave the campground cleaner than you found it”</p>
</blockquote>

<p>한번 체크인 할 때 마다 조금씩 조금씩 해당 소스를 더 좋게 만들어주는 것이다. 간단히 변수명을 바꾸는 것부터 시작해도 충분하다. 이렇게 조금씩 조금씩 만지는 소스마다 더 읽기 좋고 효율적으로 바꾼다면 점차적으로 내가 가지고 있는 모든 소스들의 코드가 한단계 더 나아질 것이다.</p>

:ET